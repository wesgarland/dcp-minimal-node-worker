#!/usr/bin/env node
/**
 * @file        mnw             Minimal Node Worker
 * @author      Wes Garland, wes@kingsds.network
 * @date        Jan 2021
 */

const os = require('os');

const scheduler = 'https://scheduler.distributed.computer';
const autoUpdate = true; /* use dcp-client bundle on scheduler */

async function main() {
  const wallet = require('dcp/wallet');
  var { Worker: StandaloneWorker } = require('dcp-worker/lib/standaloneWorker'); /* changing /lib/ to /libexec/ soon */
  var identityKeystore, paymentAddress;

  try {
    identityKeystore = wallet.getId();
  } catch(error) {
    console.warn('Warning: could not locate identity keystore in ~/.dcp/id.keystore; using randomly-generated identity');
    identityKeystore = new wallet.IdKeystore(null, '');  /* new random */
    wallet.addId(identityKeystore);  /* use this identity for DCP */
  }

  if (process.env.MNW_PAYMENT_ADDR) {
    paymentAddress = new wallet.Address(process.env.MNW_PAYMENT_ADDR);
  } else {
    try {
      paymentAddress = (await wallet.get()).address;
    } catch(error) {
      console.error('could not locate bank account keystore ~/.dcp/default.keystore');
      throw error;
    }
  }
  console.log('DCC will be deposited into account', paymentAddress);

  const Worker = typeof require('dcp/worker') === 'function'
        ? require('dcp/worker') /* current API - Jan 2021 */
        : require('dcp/worker').Worker /* future API */;

  const worker = new Worker({
    maxWorkingSandboxes: os.cpus().length * 2 || 3,
    paymentAddress:      paymentAddress,
    sandboxOptions: {
      SandboxConstructor: function (code) { return new StandaloneWorker(code, {/* evaluator options */}) }
    }
  });

  worker.on('sandbox', (sandbox) => {
    console.log("Sandbox created", sandbox.id);
    sandbox.on('sliceStart', () => console.log(`Sandbox ${sandbox.id} started slice`));
    sandbox.on('sliceError', () => console.warn(`Sandbox ${sandbox.id} slice failed`));
    sandbox.on('sliceFinish', () => console.log(`Sandbox ${sandbox.id} slice finished`));
    sandbox.on('progress', console.log);
  });

  worker.on('payment', (obj) => console.log("DCC credit:", obj.payment));
  await worker.start();
}

process.on('unhandledRejection', error => {
  console.log('Fatal Error:', error.message);
  process.exit(1);
});

require('dcp-client')
  .init(scheduler, autoUpdate)
  .then(main)
  .catch(console.error);
